pipeline {
    agent any

    tools {
        // Uses the Python installation we configured in Jenkins Global Tools
        python "System-Python-3"
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = 'Ahmedhassan1990ali/messaging-app'
        DOCKER_TAG = "build-${env.BUILD_ID}"
    }

    stages {
        stage('Checkout') {
            steps {
                // Step 1: Pull the code from GitHub.
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/Ahmedhassan1990ali/alx-backend-python.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                // Step 2: Navigate to the correct directory and install dependencies from requirements.txt
                dir('messaging_app') {
                    sh 'pip3 install -r messaging_app/requirements.txt'
                }
            }
        }

        stage('Test') {
            steps {
                // Step 3: Run tests with pytest
                dir('messaging_app') {
                    sh 'python -m pytest tests/ -v --junitxml=test-report.xml'
                }
                // --junitxml creates a report in a format Jenkins understands
            }
        }

        stage('Report') {
            steps {
                // Step 4: Publish the test report to Jenkins
                junit 'messaging_app/test-report.xml'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image, tagging it with both 'latest' and the build number
                    docker.build("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}")
                    // Also tag it as 'latest' for convenience
                    docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push('latest')
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub using the credentials from the environment
                    sh "echo ${env.DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${env.DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                    // Push both tags to Docker Hub
                    docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push()
                    docker.image("${env.DOCKER_IMAGE}:latest").push()
                }
            }
        }
    }

    post {
        always {
            // Always log out from Docker Hub to clean up, even if the build fails
            sh 'docker logout'
        }
    }
}

